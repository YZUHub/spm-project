# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import server.pb.ads_pb2 as ads__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ads_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AdServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateAd = channel.unary_unary(
                '/ads.AdService/CreateAd',
                request_serializer=ads__pb2.RealEstateAd.SerializeToString,
                response_deserializer=ads__pb2.RealEstateAd.FromString,
                _registered_method=True)
        self.GetAd = channel.unary_unary(
                '/ads.AdService/GetAd',
                request_serializer=ads__pb2.SingleAdRequest.SerializeToString,
                response_deserializer=ads__pb2.RealEstateAd.FromString,
                _registered_method=True)
        self.GetAds = channel.unary_unary(
                '/ads.AdService/GetAds',
                request_serializer=ads__pb2.FilterAdsRequest.SerializeToString,
                response_deserializer=ads__pb2.MultipleAdsResponse.FromString,
                _registered_method=True)
        self.CountAds = channel.unary_unary(
                '/ads.AdService/CountAds',
                request_serializer=ads__pb2.FilterAdsRequest.SerializeToString,
                response_deserializer=ads__pb2.CountResponse.FromString,
                _registered_method=True)
        self.UpdateAd = channel.unary_unary(
                '/ads.AdService/UpdateAd',
                request_serializer=ads__pb2.RealEstateAd.SerializeToString,
                response_deserializer=ads__pb2.RealEstateAd.FromString,
                _registered_method=True)
        self.DeleteAd = channel.unary_unary(
                '/ads.AdService/DeleteAd',
                request_serializer=ads__pb2.SingleAdRequest.SerializeToString,
                response_deserializer=ads__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.HasWriteAccess = channel.unary_unary(
                '/ads.AdService/HasWriteAccess',
                request_serializer=ads__pb2.SingleAdRequest.SerializeToString,
                response_deserializer=ads__pb2.StatusResponse.FromString,
                _registered_method=True)


class AdServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateAd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CountAds(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateAd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteAd(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HasWriteAccess(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateAd': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateAd,
                    request_deserializer=ads__pb2.RealEstateAd.FromString,
                    response_serializer=ads__pb2.RealEstateAd.SerializeToString,
            ),
            'GetAd': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAd,
                    request_deserializer=ads__pb2.SingleAdRequest.FromString,
                    response_serializer=ads__pb2.RealEstateAd.SerializeToString,
            ),
            'GetAds': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAds,
                    request_deserializer=ads__pb2.FilterAdsRequest.FromString,
                    response_serializer=ads__pb2.MultipleAdsResponse.SerializeToString,
            ),
            'CountAds': grpc.unary_unary_rpc_method_handler(
                    servicer.CountAds,
                    request_deserializer=ads__pb2.FilterAdsRequest.FromString,
                    response_serializer=ads__pb2.CountResponse.SerializeToString,
            ),
            'UpdateAd': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateAd,
                    request_deserializer=ads__pb2.RealEstateAd.FromString,
                    response_serializer=ads__pb2.RealEstateAd.SerializeToString,
            ),
            'DeleteAd': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteAd,
                    request_deserializer=ads__pb2.SingleAdRequest.FromString,
                    response_serializer=ads__pb2.StatusResponse.SerializeToString,
            ),
            'HasWriteAccess': grpc.unary_unary_rpc_method_handler(
                    servicer.HasWriteAccess,
                    request_deserializer=ads__pb2.SingleAdRequest.FromString,
                    response_serializer=ads__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ads.AdService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ads.AdService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AdService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/CreateAd',
            ads__pb2.RealEstateAd.SerializeToString,
            ads__pb2.RealEstateAd.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/GetAd',
            ads__pb2.SingleAdRequest.SerializeToString,
            ads__pb2.RealEstateAd.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/GetAds',
            ads__pb2.FilterAdsRequest.SerializeToString,
            ads__pb2.MultipleAdsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CountAds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/CountAds',
            ads__pb2.FilterAdsRequest.SerializeToString,
            ads__pb2.CountResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/UpdateAd',
            ads__pb2.RealEstateAd.SerializeToString,
            ads__pb2.RealEstateAd.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteAd(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/DeleteAd',
            ads__pb2.SingleAdRequest.SerializeToString,
            ads__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HasWriteAccess(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ads.AdService/HasWriteAccess',
            ads__pb2.SingleAdRequest.SerializeToString,
            ads__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
